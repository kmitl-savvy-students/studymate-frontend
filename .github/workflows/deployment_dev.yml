# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: StudyMate-Frontend CICD

on:
    push:
        branches:
            - develop
    workflow_dispatch:

run-name: "${{ contains(github.head_ref, 'feature/') && 'Feature' || contains(github.head_ref, 'bugfix/') && 'Bugfix' || 'Update' }}: ${{ github.head_ref }} by @${{ github.actor }}"

jobs:
    # sonarqube:
    #     name: SonarQube Analysis
    #     runs-on: ['self-hosted', 'org-runner']
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v4
    #           with:
    #             fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    #         - name: Run SonarQube Scan
    #           uses: sonarsource/sonarqube-scan-action@master
    #           env:
    #             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #             SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    build:
        name: Build
        # needs: sonarqube
        runs-on:
            labels: ['self-hosted', 'Linux', 'X64', 'front-runner']
        steps:
            - name: Fix Permissions (Prevent EACCES)
              run: | 
                sudo chown -R admin-preprod:admin-preprod /home/admin-preprod/actions-runner/_work/studymate-frontend/studymate-frontend
            - name: Checkout code
              uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Stop and Remove Old Container
              run: |
                  docker compose -f docker-compose.preprod.yml down -v || true

            - name: Remove Old Docker Image
              run: |
                  docker image prune -f
                  docker rmi -f $(docker images -q front-img) || true

            - name: Build Docker Image
              run: |
                  docker build -f Dockerfile.preprod -t front-img .

    deploy:
        name: Deploy
        needs: build
        runs-on:
            labels: ['self-hosted', 'Linux', 'X64', 'front-runner']

        steps:
            - name: build container without cache
              run: |
                  docker compose -f docker-compose.preprod.yml build --no-cache

            - name: Deploy application using Docker Compose
              run: |
                  docker compose -f docker-compose.preprod.yml up -d --force-recreate --remove-orphans
            - name: ✅✅ Finish ✅✅
              run: echo "All Passed => Fisnish !!"
